swagger: "2.0"
info:
  description: |
    This the initial capture of the Person object for registration.
  version: "1.0.0"
  title: Post Registar 
  termsOfService: http://askmpm.com/terms/
  contact:
    name: jason.spight@askmpm.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: askmpm.com
basePath: /v2
schemes:
  - http
paths:
  /person:
    post:
      tags:
        - person
      summary: Add a new person to the store
      description: ""
      operationId: addPerson
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: body
          description: Person object that needs to be added to the store
          required: false
          schema:
            $ref: "#/definitions/Person"
      responses:
        "405":
          description: Invalid input
      security:
        - personstore_auth:
          - write_persons
          - read_persons
    put:
      tags:
        - person
      summary: Update an existing person
      description: ""
      operationId: updatePerson
      consumes:
        - application/json
        - application/xml
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: body
          description: Person object that needs to be added to the store
          required: false
          schema:
            $ref: "#/definitions/Person"
      responses:
        "405":
          description: Validation exception
        "404":
          description: Person not found
        "400":
          description: Invalid ID supplied
      security:
        - personstore_auth:
          - write_persons
          - read_persons
  /persons/findByStatus:
    get:
      tags:
        - person
      summary: Finds Persons by status
      description: Multiple status values can be provided with comma seperated strings
      operationId: findPersonsByStatus
      produces:
        - application/json
        - application/xml
      parameters:
        - in: query
          name: status
          description: Status values that need to be considered for filter
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Person"
        "400":
          description: Invalid status value
      security:
        - personstore_auth:
          - write_persons
          - read_persons
  /persons/findByTags:
    get:
      tags:
        - person
      summary: Finds Persons by tags
      description: Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.
      operationId: findPersonsByTags
      produces:
        - application/json
        - application/xml
      parameters:
        - in: query
          name: tags
          description: Tags to filter by
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Person"
        "400":
          description: Invalid tag value
      security:
        - personstore_auth:
          - write_persons
          - read_persons
  /persons/{personId}:
    get:
      tags:
        - person
      summary: Find person by ID
      description: Returns a person when ID < 10.  ID > 10 or nonintegers will simulate API error conditions
      operationId: getPersonById
      produces:
        - application/json
        - application/xml
      parameters:
        - in: path
          name: personId
          description: ID of person that needs to be fetched
          required: true
          type: integer
          format: int64
      responses:
        "404":
          description: Person not found
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Person"
        "400":
          description: Invalid ID supplied
      security:
        - api_key: []
        - personstore_auth:
          - write_persons
          - read_persons
    post:
      tags:
        - person
      summary: Updates a person in the store with form data
      description: ""
      operationId: updatePersonWithForm
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - application/xml
      parameters:
        - in: path
          name: personId
          description: ID of person that needs to be updated
          required: true
          type: string
        - in: formData
          name: name
          description: Updated name of the person
          required: true
          type: string
        - in: formData
          name: status
          description: Updated status of the person
          required: true
          type: string
      responses:
        "405":
          description: Invalid input
      security:
        - personstore_auth:
          - write_persons
          - read_persons
    delete:
      tags:
        - person
      summary: Deletes a person
      description: ""
      operationId: deletePerson
      produces:
        - application/json
        - application/xml
      parameters:
        - in: header
          name: api_key
          description: ""
          required: true
          type: string
        - in: path
          name: personId
          description: Person id to delete
          required: true
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid person value
      security:
        - personstore_auth:
          - write_persons
          - read_persons
  /stores/order:
    post:
      tags:
        - store
      summary: Place an order for a person
      description: ""
      operationId: placeOrder
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: body
          description: order placed for purchasing the person
          required: false
          schema:
            $ref: "#/definitions/Order"
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: Invalid Order
  /stores/order/{orderId}:
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
      operationId: getOrderById
      produces:
        - application/json
        - application/xml
      parameters:
        - in: path
          name: orderId
          description: ID of person that needs to be fetched
          required: true
          type: string
      responses:
        "404":
          description: Order not found
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: Invalid ID supplied
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      produces:
        - application/json
        - application/xml
      parameters:
        - in: path
          name: orderId
          description: ID of the order that needs to be deleted
          required: true
          type: string
      responses:
        "404":
          description: Order not found
        "400":
          description: Invalid ID supplied
  /users:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: body
          description: Created user object
          required: false
          schema:
            $ref: "#/definitions/User"
      responses:
        default:
          description: successful operation
  /users/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ""
      operationId: createUsersWithArrayInput
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: body
          description: List of user object
          required: false
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
      responses:
        default:
          description: successful operation
  /users/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ""
      operationId: createUsersWithListInput
      produces:
        - application/json
        - application/xml
      parameters:
        - in: body
          name: body
          description: List of user object
          required: false
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
      responses:
        default:
          description: successful operation
  /users/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      produces:
        - application/json
        - application/xml
      parameters:
        - in: query
          name: username
          description: The user name for login
          required: false
          type: string
        - in: query
          name: password
          description: The password for login in clear text
          required: false
          type: string
      responses:
        "200":
          description: successful operation
          schema:
            type: string
        "400":
          description: Invalid username/password supplied
  /users/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      produces:
        - application/json
        - application/xml
      responses:
        default:
          description: successful operation
  /users/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ""
      operationId: getUserByName
      produces:
        - application/json
        - application/xml
      parameters:
        - in: path
          name: username
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          type: string
      responses:
        "404":
          description: User not found
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/User"
        "400":
          description: Invalid username supplied
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/json
        - application/xml
      parameters:
        - in: path
          name: username
          description: name that need to be deleted
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: false
          schema:
            $ref: "#/definitions/User"
      responses:
        "404":
          description: User not found
        "400":
          description: Invalid user supplied
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/json
        - application/xml
      parameters:
        - in: path
          name: username
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        "404":
          description: User not found
        "400":
          description: Invalid username supplied
securityDefinitions:
  api_key:
    type: apiKey
    name: api_key
    in: header
  personstore_auth:
    type: oauth2
    authorizationUrl: http://personstore.swagger.io/api/oauth/dialog
    flow: implicit
    scopes:
      write_persons: modify persons in your account
      read_persons: read your persons
definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
  Category:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
  Person:
    type: object
    required:
      - name
      - photoUrls
    properties:
      id:
        type: integer
        format: int64
      category:
        $ref: "#/definitions/Category"
      name:
        type: string
        example: doggie
      photoUrls:
        type: array
        items:
          type: string
      tags:
        type: array
        items:
          $ref: "#/definitions/Tag"
      status:
        type: string
        description: person status in the store
  Tag:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
  Order:
    type: object
    properties:
      id:
        type: integer
        format: int64
      personId:
        type: integer
        format: int64
      quantity:
        type: integer
        format: int32
      shipDate:
        type: string
        format: date-time
      status:
        type: string
        description: Order Status
      complete:
        type: boolean
